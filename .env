cmakeOrMake(){
  local DO_GEN_HEADER_INCLUDES
  local DO_CLEAN
  local DO_CMAKE
  local DO_TEST
  local DO_TEST_ERR
  local DO_BUILD
  local DO_RUN
  local STOP=0

  help(){
    echo "Commands:"
    echo " gen-header-includes"
    echo " clean"
    echo " cmake"
    echo " test"
    echo " test-err"
    echo " build"
    echo " run"
    echo " help"
  }

  if [ ! -f "./CMakeLists.txt" ]; then
    echo "you should run make only in root dir"
    STOP=1 1
  fi

  if [ ! -d "./build" ]; then
    echo "Build dir is non existent, will running cmake script"
    DO_CMAKE=1
  fi

  if [[ $# == "0" ]]; then
    set -- "build"
  fi
  case $1 in
    gen-header-includes)
      DO_GEN_HEADER_INCLUDES=1
      shift
      ;;
    clean)
      DO_CLEAN=1
      shift
      ;;
    cmake)
      DO_CMAKE=1
      shift
      ;;
     test)
      DO_TEST=1
      shift
      ;;
      test-err)
      DO_TEST_ERR=1
      shift
      ;;
    build)
      DO_BUILD=1
      shift
      ;;
    run)
      DO_BUILD=1
      DO_RUN=1
      shift
      ;;
    help)
      help
      STOP=1
      ;;
    *)
      echo "unknow command $1"
      help
      STOP=1
      ;;
  esac

  if [[ "$DO_CMAKE" == "1" && "$STOP" == "0" ]]; then
    echo "RUNNING CMAKE SCRIPT"
    rm -rf build
    cmake -B ./build -DCMAKE_BUILD_TYPE=Debug || STOP=1
  fi

  if [[ "$DO_GEN_HEADER_INCLUDES" == "1" && "$STOP" == "0" ]]; then
    echo "GENERATING FILE .header-includes"
    cc -E -x c++ - -v < /dev/null 2>&1 | \
        awk '/End of search list./ { show=0 } \
        { if (show) printf "-I%s\n",$1 }; \
        /#include <...> search starts here:/ { show=1; }' >> .header-includes
  fi

  if [[ "$DO_CLEAN" == "1" && "$STOP" == "0" ]]; then
    echo "CLEANING"

    [ -f ".header-includes" ] && rm .header-includes
    cmake --build build -j -- clean || STOP=1
  fi

  if [[ "$DO_TEST" == "1" && "$STOP" == "0" ]]; then
    echo "RUNNING TESTS"
    cmake --build build -j -- mineclone_tests &&
    cmake --build build -j -- test || STOP=1

  fi

  if [[ "$DO_TEST_ERR" == "1" && "$STOP" == "0" ]]; then
    echo "RUNNING TESTS WITH ERROR OUTPUT"
    cmake --build build -j -- mineclone_tests &&
    pushd build &&
    ctest --rerun-failed --output-on-failure
    popd
    if [[ $1 != 0 ]]; then STOP=1; fi

  fi

  if [[ "$DO_BUILD" == "1" && "$STOP" == "0" ]]; then
    echo "BUILDING"
    cmake --build build -j -- mineclone || STOP=1
  fi

  if [[ "$DO_RUN" == "1" && "$STOP" == "0" ]]; then
    echo "RUNNING"
    ./build/mineclone $@ || STOP=1
  fi

  unfunction help
}
alias make=cmakeOrMake
